name: Notify Target Directory Changes

on:
  push:
    branches:
      - main

jobs:
  notify-changes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files in target directory
        id: changed-files
        run: |
          # Ââç„ÅÆ„Ç≥„Éü„ÉÉ„Éà„Å®„ÅÆÂ∑ÆÂàÜ„ÇíÂèñÂæóÔºàtarget„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ„ÅøÔºâ
          changed_files=$(git diff --name-status HEAD^ HEAD | grep -E '^[AMDR].*target/' || true)
          
          if [ -z "$changed_files" ]; then
            echo "No changes in target directory"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changed files in target directory:"
            echo "$changed_files"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            # „Éï„Ç°„Ç§„É´„ÅÆÁä∂ÊÖã„ÇíÊï¥ÂΩ¢
            formatted_files=""
            while IFS= read -r line; do
              status=$(echo "$line" | awk '{print $1}' | sed 's/[0-9]*$//')
              if [[ "$status" == "R" ]]; then
                old_file=$(echo "$line" | awk '{print $2}')
                new_file=$(echo "$line" | awk '{print $3}')
                formatted_files="${formatted_files}REN: ${old_file} ‚Üí ${new_file}\\n"
              else
                file=$(echo "$line" | awk '{print $2}')
                if [ "$status" = "A" ]; then
                  formatted_files="${formatted_files}ADD: ${file}\\n"
                elif [ "$status" = "M" ]; then
                  formatted_files="${formatted_files}MOD: ${file}\\n"
                elif [ "$status" = "D" ]; then
                  formatted_files="${formatted_files}DEL: ${file}\\n"
                fi
              fi
            done <<< "$changed_files"
            
            # ÊúÄÂæå„ÅÆÊîπË°å„ÇíÂâäÈô§„Åó„Å¶„Ç®„Çπ„Ç±„Éº„Éó
            formatted_files=$(echo -n "$formatted_files" | sed 's/\\n$//' | sed 's/"/\\"/g')
            echo "files=$formatted_files" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        if: steps.changed-files.outputs.has_changes == 'true'
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook: ${{ secrets.SLACK_URL }}
          webhook-type: incoming-webhook
          payload: |
            {
              "text": "üöÄ target„Éá„Ç£„É¨„ÇØ„Éà„É™„Å´Â§âÊõ¥„Åå„ÅÇ„Çä„Åæ„Åó„Åü",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "üìÅ Target Directory Changes"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Changed Files:*\n```\n${{ steps.changed-files.outputs.files }}\n```"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Pusher:* ${{ github.actor }}"
                  }
                }
              ]
            }